//METHOD-1:USING ARRAYLISTS (This method gave TLE for larger values of n)
import java.util.*;

public class Solution {
    public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       ArrayList<Integer> list= new ArrayList<>();
       int n=scanner.nextInt();
       if (n==1) {
        System.out.print(1);
        return;
       }
       if (n>1 && n<=3) {
         System.out.println("NO SOLUTION");
         return;
       }
       list.add(1);
       list.add(n);
       for(int i=2;i<n;i++){
         if (i%2==0) {
            list.add(i);
         }
         else{
            list.add(0,i);
         }
       }
       for(int i:list){
        System.out.print(i);
        System.out.print(" ");
       }
       scanner.close();
    
    }
}
//METHOD-2 OF SOLVING THE PROBLEM WAS USING A STRINGBUILDER/STRINGBUFFER (THIS APPROACH ALSO GAVE TLE ON THE TEST CASES WHERE THE INPUT SIZE WAS LARGER) 
MAKES NO SENSE SINCE BOTH APPROACHES SOLVE THE PROBLEM IN O(n) TIME,I DON'T THINK I CAN OPTIMIZE THE SOLUTION ANY FURTHER.
import java.util.*;

public class Solution {
    public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       int n=scanner.nextInt();
       if (n==1) {
        System.out.print(1);
        return;
       }
       if (n>1 && n<=3) {
         System.out.println("NO SOLUTION");
         return;
       }
       StringBuffer sBuffer=new StringBuffer(Integer.toString(1));
       sBuffer.append(" "+Integer.toString(n));
       for(int i=2;i<n;i++){
         if (i%2==0) {
            sBuffer.append(" "+Integer.toString(i));
         }
         else{
            sBuffer.insert(0, Integer.toString(i)+" ");
         }
       }
       System.out.println(sBuffer);

       scanner.close();
    
    }
}

UPDATE:AT THE END,WHAT GOT SUBMITTED WAS THIS SOLUTION IN PYTHON AFTER MAKING A FEW OPTIMIZATIONS.
KEY POINT TO REMEMBER IS THAT STRING CONCATENATION INSIDE OF A LOOP IS A TIME CONSUMING OPERATION FOR LARGER INPUTS SINCE STRINGS ARE IMMUTABLE IN BOTH PYTHON AND JAVA.
THEREFORE IT'S BETTER TO STORE THESE VALUES IN AN ARRAY OR ANYHTINH THAT AVOIDS CONCATENATING STRINGS INSIDE OF A LOOP ALTOGETHER.
THIS IS THE SOLUTION(SIMILAR OPTIMIZATIONS CAN BE DONE IN THE JAVA CODE AS WELL,AND IN METHOD -1,IT'LL BE BETTER TO USE AN ARRAY INSTEAD OF AN ARRAYLIST)
n = int(input())
result = []
if n == 1:
    print(1)
elif n <= 3:
    print("NO SOLUTION")
else:
    for i in range(2, n + 1, 2):
        result.append(str(i))
    for i in range(1, n + 1, 2):
        result.append(str(i))
    print(" ".join(result))
