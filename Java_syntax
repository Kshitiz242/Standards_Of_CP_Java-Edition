NOTE: THE WORDS SEPARATED BY THIS SYMBOL (->) ARE HEADINGS. KNOWING THIS WILL HELP TO NAVIGATE BETWEEN DIFFERENT TOPICS WITH A BIT MORE EASE.

//Syntax to declare a hashmap in Java
HashMap<K,V> Map = new HashMap<>();  //K->denotes key type  V->denotes value type
HashMap method-> 
V getOrDefault(Object key, V defaultValue)

//Collection classes in Java

Iterable Interface->
The Iterable interface is the root interface for all the collection classes. The Collection interface extends the Iterable interface and therefore all the subclasses of Collection interface also 
implement the Iterable interface.

It contains only one abstract method. i.e.,

Iterator<T> iterator()  
It returns the iterator over the elements of type T.


List Interface->
List interface is the child interface of Collection interface. It inhibits a list type data structure in which we can store the ordered collection of objects. It can have duplicate values.

List interface is implemented by the classes ArrayList, LinkedList, Vector, and Stack.
List <data-type> list1= new ArrayList();  
List <data-type> list2 = new LinkedList();  
List <data-type> list3 = new Vector();  
List <data-type> list4 = new Stack();  

//Traversing list through Iterator  
Iterator itr=list.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  

Vectors in Java->
Vector uses a dynamic array to store the data elements. It is similar to ArrayList. However, 
It is synchronized and contains many methods that are not the part of Collection framework.

Syntax->
import java.util.*;  
public class TestJavaCollection3{  
public static void main(String args[]){  
Vector<String> v=new Vector<String>();  
v.add("Ayush");  
v.add("Amit");  
v.add("Ashish");  
v.add("Garima");  
Iterator<String> itr=v.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
}  
}  



