M-1:  REALLY BAD AND SLOW APPROACH(GIVES TLE) and doesn't work for input (4,2) and higher
import java.util.*;

public class Solution {
   public static int min(int u,int v){
   if(u>v){
      return v;
   }
   else{
      return u;
   }
   }

     public static int diagonalEntry(int a,int b){
         int entry=1;
         int adder=2;
         for(int j=2;j<=b;j++){
               entry=entry+adder;
               adder=adder+2;
         }
         return entry;
      }
   public static void main(String[] args) {
      Scanner scanner = new Scanner(System.in);
      int t=scanner.nextInt();
      for(int i=0;i<t;i++){
         int element;
         int y=scanner.nextInt();
         int x=scanner.nextInt();
         int a,b;    //a is the row pointer and b is the column pointer
         a=b=min(y, x);
         element=diagonalEntry(a, b);
         while (a!=y || b!=x) {
            //For going right and down
            if (a==1 && b%2==1) {  //1 step right
               b++;
               element++;
            }
            else if(a==1 && b%2==0){  //As far down as possible
               while (a!=y && a!=b ) {
                  a++;
                  element++;
               }
            }
            else if (b==1 && a%2==1) { //As far right as possible
               while (b!=x && b!=a+1) {
                  b++;
                  element++;
               }
            }
            else if (b==1 && a%2==0) {  //1 step down
               a++;
               element++;
            }
            //For going left and up
            else if(a==b && a%2==0){ //as far left as possible
               while (b!=1 && b!=x) {
                  b--;
                  element++;
               }
            }
            else if (a==b && a%2==1) { //as far up as possible
               while (a!=y && a!=1) {
                  a--;
                  element++;
               }
            }
         }
         System.out.println(element);
         }
         scanner.close();
      }
      
   }

METHOD-2:THIS APPROACH IS LOGICALLY SOUND BUT GIVES TLE FOR A TIME LIMIT OF 1 SECOND DUE TO THE diagonalEntry function having a calculation intesive for loop (Much better than the 1st one)

import java.util.*;

public class Solution {
   public static int max(int u,int v){
   if(u>v){
      return u;
   }
   else{
      return v;
   }
   }

     public static int diagonalEntry(int a,int b){
         int entry=1;
         int adder=2;
         for(int j=2;j<=b;j++){
               entry=entry+adder;
               adder=adder+2;
         }
         return entry;
      }
   public static void main(String[] args) {
      Scanner scanner = new Scanner(System.in);
      int t=scanner.nextInt();
      for(int i=0;i<t;i++){
         int element;
         int y=scanner.nextInt();
         int x=scanner.nextInt();
         int a;
         int b;
         a=b=max(y, x);
         element=diagonalEntry(a, b);
         if (x==y) {
            System.out.println(element);
         }
         else if(x!=y){
            if (b==x) { //Implies a=b=x and x>y => a>y that means you must go up 
                if (b%2==0) { //Implies that element decreases on going up from here
                    element=element-(a-y);
                }
                else if (b%2==1) {  //element increases on going up from here
                    element=element+(a-y);
                }
            }
            else if (b!=x) { //Implies a=b=y and y>x => b>x i.e. you must go left 
                if (b%2==0) { //Element increases on going left from here 
                    element=element+(b-x);
                }
                else if (b%2==1) { //Element decreases if you left from here
                    element=element-(b-x);
                }
            }
            System.out.println(element);
        }
        }
         scanner.close();
      }
      
   }


There's a more effficient way to calculate the diagonal entry in the code written above but it still shows WA due to TLE for some reason
(despite making this optimization):

     public static int diagonalEntry(int a,int b){  //I can get away with giving only 1 argument here since the coordinates are equal at diagonals 
        //but it makes no difference on the execution speed of the code here
         int entry=(a*a) - (a-1);
         return entry;
      }

